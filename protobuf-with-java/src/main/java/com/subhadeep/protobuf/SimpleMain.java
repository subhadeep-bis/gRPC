package com.subhadeep.protobuf;

import example.simple.Simple.SimpleMessage;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Arrays;

public class SimpleMain {
    public static void main(String[] args) {
        System.out.println("Hello World!");

        // This builder will allow us to create simple messages directly from the code
        SimpleMessage.Builder builder = SimpleMessage.newBuilder();

        // setting the field values of the simple class that was generated by simple message in simple.proto file
        builder.setId(42);
        builder.setIsSimple(true);
        builder.setName("My Simple message name");

        /* One Thing that you can do with builder is that
        *  since, the set methods itself returns Builder
        * therefore you can set the values in the following way*/
        builder.setId(23)
                .setIsSimple(false)
                .setName("Message got changed, bitch!");

        /*Repeated fields of the Simple Class*/
        builder.addSampleList(1)
                .addSampleList(2)
                .addSampleList(3);
        /* or,*/
        builder.addAllSampleList(Arrays.asList(4,5,6));
        /* Clear Sample List */
//        builder.clearSampleList();

        /* set sample list */
//        builder.setSampleList(3,45);

        System.out.println(builder.toString());

        /* Getting simple message out of the builder*/
        SimpleMessage message = builder.build();

        /* Before with the builder we were setting fields, but after its built
        * we can get the data from it by get methods*/
        message.getId();
        message.getName();

        /* We may want to write the message to the file
        * and we do it in the following way
        * i.e. write the protocol buffers binary to a file*/

        try {
            FileOutputStream outputStream = new FileOutputStream("simple_message.bin");
            message.writeTo(outputStream);
            outputStream.close();
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        catch (IOException e) {
            e.printStackTrace();
        }

        /* Above we stored the message into a file which is in binary format.
        * However, we can also send the message over the network
        * send as byte array*/
        byte[] bytes = message.toByteArray();

        /* Previously we output the binary file
        * now we will input a file that is already there*/
        try {
            System.out.println("READING FROM FILE***********************");
            FileInputStream inputStream = new FileInputStream("simple_message.bin");
            SimpleMessage messageFromFile = SimpleMessage.parseFrom(inputStream);
            System.out.println(messageFromFile);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }

        /* You can share that binary file with anybody and any language can
        * read it, because protocol buffers serializes the binary to anything*/
    }
}
